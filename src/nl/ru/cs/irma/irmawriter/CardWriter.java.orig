package nl.ru.cs.irma.irmawriter;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.sql.SQLException;
import java.util.Date;
import java.util.Observable;
import java.util.Properties;
import java.util.Random;
import java.util.Scanner;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.smartcardio.CardException;

import net.sourceforge.scuba.smartcards.CardServiceException;

import credentials.CredentialsException;

public class CardWriter extends Observable {
	private static final String MUTIL_LOG_LOCATION = "mutil_log.txt";

	private static final String APPLET_LOCATION = "load_applet.txt";

	private static final String MUTIL_LOCATION = "MUtil/MUtil.exe";

	//private static final ResourceBundle BUNDLE = ResourceBundle.getBundle("nl.ru.cs.irma.irmawriter.messages");
	private static Properties config = null;
	
	private static Random rand;
	
	private int progress = 0;
	
	static {
		rand = new Random();
	}
	
<<<<<<< HEAD
	public void Write(Card card) throws SQLException, MessagingException, FileNotFoundException, IOException, InterruptedException, CardException, CredentialsException, MUtilException {
		
		setProgress(5); 
		
		int pin = rand.nextInt(10000);
=======
	public static void Write(Card card) throws SQLException, MessagingException, FileNotFoundException, IOException, InterruptedException, CardException, CredentialsException, CardServiceException {
		byte[] pin = new byte[4];
		for(int i = 0; i < 4; i++) {
			pin[i] = (byte) rand.nextInt(10);
		}
		
>>>>>>> 724d8cdecfec33d73349c610e8891c03ace987b2
		try {
			DatabaseConnection.setCardStatusPersonalized(card.getCardId());
			setProgress(15); 
			
			loadApplet();
			setProgress(40); 
			
			IrmaIssuer issuer = new IrmaIssuer();
<<<<<<< HEAD
			issuer.issue();
			setProgress(80); 
			
			//TODO PIN
=======
			issuer.setPin(pin);
			issuer.issue(pin);
>>>>>>> 724d8cdecfec33d73349c610e8891c03ace987b2
			
		}
		catch (SQLException e) {
			DatabaseConnection.rollback();
			throw e;
		}
		card.setPersonalised();
		DatabaseConnection.commit();
<<<<<<< HEAD
		setProgress(90);
=======

>>>>>>> 724d8cdecfec33d73349c610e8891c03ace987b2
		sendMail(pin, card);
		setProgress(100);
	}

	private void loadApplet() throws IOException, InterruptedException, MUtilException {
		Runtime rt = Runtime.getRuntime();
		Process proc = rt.exec(new String[]{MUTIL_LOCATION, APPLET_LOCATION, MUTIL_LOG_LOCATION});
		proc.waitFor();
		
		Scanner scan = new Scanner(new File(MUTIL_LOG_LOCATION));
		String line = scan.nextLine();
		while(scan.hasNextLine()) {
			line = scan.nextLine();
		}
		
		//It is not only OK if the applet is succesfully loaded, but also if it was already on the card
		if(!line.equals("Line 3:;Loaded") && !line.endsWith("Duplicate AID")) {
			throw new MUtilException(line);
		}
	}

<<<<<<< HEAD
	private void sendMail(int pin, Card card) throws MessagingException, FileNotFoundException, IOException {
=======
	private static void sendMail(byte[] pin, Card card) throws MessagingException, FileNotFoundException, IOException {
		
		for(int i = 0; i < 4; i++) {
			pin[i] += 0x30;
		}
		String pinString = new String(pin);
>>>>>>> 724d8cdecfec33d73349c610e8891c03ace987b2
		
		if(config == null) {
			config = new Properties();
			config.load(new FileInputStream("config.properties"));
		}
		
		Properties props = System.getProperties();
		props.put("mail.smtp.host", config.getProperty("smtpServer"));
		Session session = Session.getDefaultInstance(props);
		Message msg = new MimeMessage(session);
		try {
			msg.setFrom(new InternetAddress(config.getProperty("fromAdres")));
		} catch (AddressException e) {
			e.printStackTrace();
		}
		msg.setRecipient(Message.RecipientType.TO, new InternetAddress(card.getEmail()));
		msg.setSubject(config.getProperty("mailSubject"));
		msg.setText(config.getProperty("mailBody").replace("$NAME$", card.getName()).replace("$PIN$", pinString));
		msg.setSentDate(new Date());
		Transport.send(msg);
	}
	
	private void setProgress(int progress) {
		this.progress = progress;
		setChanged();
		notifyObservers();
	}
	
	public int getProgress() {
		return progress;
	}
	
	public static class MUtilException extends Exception {
		public MUtilException(String message) {
			super(message);
		}
	}
}
